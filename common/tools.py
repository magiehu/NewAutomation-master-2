from ..config.config import Conf# from config.config import Confimport timefrom ..common.api import ApiCall# from common.api import ApiCallimport loggingclass DisposeData:    def __init__(self, information, token=None):        """        初始化参数        """        self.url, self.app_key, self.secret = Conf().api_conf()        self.information = information        self.token = token        self.interfaceName = information.get('name')        self.api = information.get('api')        self.method = information.get('method')        '''        判断接口类型        '''        if self.interfaceName[:3] == "old":            self.param = information.get('param')        else:            self.data = information.get('data')    def response_(self):        # 对新接口用例进行格式化处理        param = self.template_()        # 调用接口，取到接口的返回值        result = ApiCall(param).api_call(self.token, self.api, self.method)        # 断言        self.demo_assert(result)        return result    # 新街口（/API）入参格式化处理    def template_(self):        if self.interfaceName[:3] == "old":            param = {                'token': self.token,                'param': self.param            }        else:            param = {                # "access_token": self.token,                "name": self.interfaceName,                "version": "",                "app_key": self.app_key,                "data": self.data,                "timestamp": time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()),                "format": "json"            }        return param    @staticmethod    def demo_assert(result):        if 'success' in result.keys():            assert result.get('success') is True        elif 'code' in result.keys():            assert result.get('code') == 0        else:            print("返回值中不存在'success'或'code'！请添加相关断言方式！")